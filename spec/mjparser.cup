package rs.ac.bg.etf.pp1;
import rs.ac.bg.etf.pp1.ast.*;
import java_cup.runtime.*;

parser code {:
	
	int syntaxErrors=0;
	String syntaxErrorMessages="";
	
	public int getSyntaxErrors(){return syntaxErrors;}
	public String getSyntaxErrorMessages(){return syntaxErrorMessages;}

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSyntax error", cur_token);
    }

    public void report_error(String message, Object info) {
    	syntaxErrors++;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left).append(": ").append(((Symbol) info).value);
        /*System.out.println(msg.toString());*/
		syntaxErrorMessages+=msg.toString()+"\n";
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left).append(": ").append(((Symbol) info).value);
        /*System.out.println(msg.toString());*/
    }
    
:}

/*scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		System.out.println(s.toString() + " " + s.value.toString());
	return s;
:}*/

terminal PROGRAM, BREAK, CLASS, ELSE, IF, NEW, PRINT, READ, RETURN, VOID, DO, WHILE, EXTENDS, CONTINUE, CONST;
terminal PLUS,MINUS,ASTERISK,SLASH,PERCENT,EQUALEQUAL,NOTEQUAL,GREATER,GREATEREQUAL,LESS,LESSEQUAL,AND,OR,EQUAL,PLUSPLUS,MINUSMINUS,SEMICOLON,COMMA,DOT,LPAREN,RPAREN,LSQUARE,RSQUARE,LBRACE,RBRACE;
terminal Integer NUMCONST;
terminal Character CHARCONST;
terminal Boolean BOOLCONST;
terminal String IDENTIFIER;

non terminal program;
non terminal programDeclList, methodDecl;
non terminal programDecl;
non terminal constDecl, varDecl, classDecl;
non terminal varList;
non terminal classExtension, localVarDecl, classMethodDecl;
non terminal formPars, statement;
non terminal formParsList;
non terminal designatorStatement;
non terminal actPars;
non terminal actParsList;
non terminal relop;
non terminal addop, mulop;
non terminal statementList;
non terminal constAssignmentList, constAssignment;
non terminal ifChainWithUnmatched, otherStatements;
non terminal methodHeader;

non terminal rs.etf.pp1.symboltable.concepts.Obj programName,constName,var,methodName,designator,constant,arrayDesignator;
non terminal rs.etf.pp1.symboltable.concepts.Struct type,returnType,expr,term,factor,condFact,condTerm,condition;

program::=(Program) PROGRAM programName programDeclList LBRACE methodDecl RBRACE;
programName::=(ProgramName) IDENTIFIER:name;
programDeclList::=(ProgramDeclarations) programDecl programDeclList | (NoProgramDeclarations) /*eps*/;
programDecl::=(ProgramDeclConstant) constDecl | (ProgramDeclVar) varDecl | (ProgramDeclClass) classDecl;
constDecl::=(ConstDecl) CONST type constAssignmentList SEMICOLON;
constAssignmentList::=(MultipleConstAssignments) constAssignment COMMA constAssignmentList | (OneConstAssignment) constAssignment;
constAssignment::=(ConstAssignment) constName EQUAL constant;
constName::=(ConstName) IDENTIFIER:name;
type::=(Type) IDENTIFIER:name;
constant::=(NumberConstant) NUMCONST | (CharacterConstant) CHARCONST | (BooleanConstant) BOOLCONST;
varDecl::=(VarDeclNoError) type varList SEMICOLON
		| (ErrorVarDecl) error SEMICOLON:e {: parser.syntaxErrorMessages+="Syntax recovery at line "+eleft; :};
varList::=(MultipleVarDecls) var COMMA varList | (OneVarDecl) var;
//error productions - varDecl & varList?
var::=(ScalarVar) IDENTIFIER:name | (ArrayVar) IDENTIFIER:name LSQUARE RSQUARE
		| (ErrorVar) error:e {: parser.syntaxErrorMessages+="Syntax recovery at line "+eleft; :};
	//extends clause? ClassVarDecl?
classDecl::=(ClassDecl) CLASS IDENTIFIER classExtension LBRACE localVarDecl classMethodDecl RBRACE;
classExtension::=(Extension) EXTENDS type | (NoExtension) /*eps*/;
localVarDecl::=(LocalVarDeclarations) varDecl localVarDecl | (NoLocalVarDeclarations) /*eps*/;
classMethodDecl::=(ClassMethods) LBRACE methodDecl RBRACE | (NoClassMethods) /*eps*/;
methodDecl::=(MethodDeclarations) methodDecl methodHeader LBRACE statementList RBRACE | (NoMethodDeclarations) /*eps*/;
methodHeader::=(MethodHeader) returnType methodName LPAREN formPars RPAREN localVarDecl;
methodName::=(MethodName) IDENTIFIER:name;
returnType::=(ReturnTypeNonVoid) type | (ReturnTypeVoid) VOID;
formPars::=(FormalParameters) formParsList | (NoFormalParameters) /*eps*/;
formParsList::=(MultipleFormalParameters) formParsList COMMA type var | (OneFormalParameter) type var;
statementList::=(Statements) statement statementList | (NoStatements) /*eps*/;
statement::=(IfsUnmatched) ifChainWithUnmatched | (NotIfsUnmatched) otherStatements
			| (ErrorStatement) error SEMICOLON:e {: parser.syntaxErrorMessages+="Syntax recovery at line "+eleft; :};
ifChainWithUnmatched::=(IfWithoutElse) IF LPAREN condition RPAREN statement | (IfWithUnmatchedInElse) IF LPAREN condition RPAREN otherStatements ELSE ifChainWithUnmatched;
otherStatements::=(StatementWithDesignator) designatorStatement SEMICOLON
			| (Break) BREAK SEMICOLON
			| (Continue) CONTINUE SEMICOLON
			| (Read) READ LPAREN designator RPAREN SEMICOLON
			| (PrintWithWidth) PRINT LPAREN expr COMMA NUMCONST RPAREN SEMICOLON
			| (PrintSimple) PRINT LPAREN expr RPAREN SEMICOLON
			| (ReturnVoid) RETURN SEMICOLON
			| (ReturnNonVoid) RETURN expr SEMICOLON
			| (IfWithMatchedInElse) IF LPAREN condition RPAREN otherStatements ELSE otherStatements
			| (DoWhileLoop) DO statement WHILE LPAREN condition RPAREN SEMICOLON
			| (StatementBlock) LBRACE statementList RBRACE;
designatorStatement::=(Assignment) designator EQUAL expr
					| (Increment) designator PLUSPLUS
					| (Decrement) designator MINUSMINUS
					| (FunctionCall) designator LPAREN actPars RPAREN;
actPars::=(ActualParameters) actParsList | (NoActualParameters) /*eps*/;
actParsList::=(MultipleActualParameters) expr COMMA actParsList | (OneActualParameter) expr;
condition::=(ConditionTerm) condTerm | (LogicalOr) condTerm OR condTerm;
condTerm::=(ConditionFact) condFact | (LogicalAnd) condFact AND condFact;
condFact::=(ConditionRelation) expr relop expr | (ConditionExpression) expr;
relop::=(EqualOp) EQUALEQUAL | (NotEqualOp) NOTEQUAL | (GreaterOp) GREATER | (GreaterOrEqualOp) GREATEREQUAL | (LessOp) LESS | (LessOrEqualOp) LESSEQUAL;
expr::=(ExpressionTerm) term | (ExpressionNegation) MINUS term | (ExpressionAddOp) expr addop term;
term::=(TermFactor) factor | (TermMulOp) term mulop factor;
factor::=(FactorDesignator) designator | (FactorConstant) constant | (FactorExpressionInParentheses) LPAREN expr RPAREN | (FactorFunctionCall) designator LPAREN actPars RPAREN | (FactorNewClassInstance) NEW type | (FactorNewArrayAllocation) NEW type LSQUARE expr RSQUARE;
	//complexDesignator
designator::=(SimpleDesignator) IDENTIFIER | (ClassField) designator DOT IDENTIFIER | (ArrayElementDesignator) arrayDesignator LSQUARE expr RSQUARE;
arrayDesignator::=(ArrayDesignator) designator;
addop::=(AdditionOp) PLUS | (SubtractionOp) MINUS;
mulop::=(MultiplicationOp) ASTERISK | (DivisionOp) SLASH | (ModuleOp) PERCENT;