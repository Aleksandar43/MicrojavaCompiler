package rs.ac.bg.etf.pp1;
import rs.ac.bg.etf.pp1.ast.*;
import java_cup.runtime.*;

parser code {:
	
	int syntaxErrors=0;
	String syntaxErrorMessages="";
	
	public int getSyntaxErrors(){return syntaxErrors;}
	public String getSyntaxErrorMessages(){return syntaxErrorMessages;}

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSyntax error", cur_token);
    }

    public void report_error(String message, Object info) {
    	syntaxErrors++;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left).append(": ").append(((Symbol) info).value);
        /*System.out.println(msg.toString());*/
		syntaxErrorMessages+=msg.toString()+"\n";
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left).append(": ").append(((Symbol) info).value);
        /*System.out.println(msg.toString());*/
    }
    
:}

/*scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		System.out.println(s.toString() + " " + s.value.toString());
	return s;
:}*/

terminal PROGRAM, BREAK, CLASS, ELSE, IF, NEW, PRINT, READ, RETURN, VOID, DO, WHILE, EXTENDS, CONTINUE, CONST;
terminal PLUS,MINUS,ASTERISK,SLASH,PERCENT,EQUALEQUAL,NOTEQUAL,GREATER,GREATEREQUAL,LESS,LESSEQUAL,AND,OR,EQUAL,PLUSPLUS,MINUSMINUS,SEMICOLON,COMMA,DOT,LPAREN,RPAREN,LSQUARE,RSQUARE,LBRACE,RBRACE;
terminal Integer NUMCONST;
terminal Character CHARCONST;
terminal Boolean BOOLCONST;
terminal String IDENTIFIER;

non terminal Program program;
non terminal ProgramDeclList programDeclList;
nonterminal MethodDecl methodDecl;
non terminal ProgramDecl programDecl;
non terminal ConstDecl constDecl;
nonterminal VarDecl varDecl;
nonterminal ClassDecl classDecl;
non terminal VarList varList;
non terminal ClassExtension classExtension;
nonterminal LocalVarDecl localVarDecl;
nonterminal ClassMethodDecl classMethodDecl;
non terminal FormPars formPars;
nonterminal Statement statement;
non terminal FormParsList formParsList;
non terminal DesignatorStatement designatorStatement;
non terminal ActPars actPars;
nonterminal Condition condition;
non terminal ActParsList actParsList;
non terminal CondTerm condTerm;
nonterminal CondFact condFact;
nonterminal Relop relop;
non terminal Term term;
nonterminal Factor factor;
non terminal Addop addop;
nonterminal Mulop mulop;
non terminal StatementList statementList;
non terminal ConstAssignmentList constAssignmentList;
nonterminal ConstAssignment constAssignment;
non terminal IfChainWithUnmatched ifChainWithUnmatched;
nonterminal OtherStatements otherStatements;
non terminal MethodHeader methodHeader;

non terminal rs.etf.pp1.symboltable.concepts.Obj programName,constName,var,methodName,designator,constant;
non terminal rs.etf.pp1.symboltable.concepts.Struct type,returnType,expr;

program::=(Program) PROGRAM programName:p1 programDeclList:p2 LBRACE methodDecl:m3 RBRACE {: RESULT=new Program(p1, p2, m3); RESULT.setLine(p1left); :};
programName::=(ProgramName) IDENTIFIER:name {: RESULT=new ProgramName(name); RESULT.setLine(nameleft); :};
programDeclList::=(ProgramDeclarations) programDecl:p1 programDeclList:p2 {: RESULT=new ProgramDeclarations(p1, p2); RESULT.setLine(p1left); :} | (NoProgramDeclarations) {: RESULT=new NoProgramDeclarations(); :} /*eps*/;
programDecl::=(ProgramDeclConstant) constDecl:c1 {: RESULT=new ProgramDeclConstant(c1); RESULT.setLine(c1left); :} | (ProgramDeclVar) varDecl:v1 {: RESULT=new ProgramDeclVar(v1); RESULT.setLine(v1left); :} | (ProgramDeclClass) classDecl:c1 {: RESULT=new ProgramDeclClass(c1); RESULT.setLine(c1left); :};
constDecl::=(ConstDecl) CONST type:t1 constAssignmentList:c2 SEMICOLON {: RESULT=new ConstDecl(t1, c2); RESULT.setLine(t1left); :};
constAssignmentList::=(MultipleConstAssignments) constAssignment:c1 COMMA constAssignmentList:c2 {: RESULT=new MultipleConstAssignments(c1, c2); RESULT.setLine(c1left); :} | (OneConstAssignment) constAssignment:c1 {: RESULT=new OneConstAssignment(c1); RESULT.setLine(c1left); :};
constAssignment::=(ConstAssignment) constName:c1 EQUAL constant:c2 {: RESULT=new ConstAssignment(c1, c2); RESULT.setLine(c1left); :};
constName::=(ConstName) IDENTIFIER:name {: RESULT=new ConstName(name); RESULT.setLine(nameleft); :};
type::=(Type) IDENTIFIER:name {: RESULT=new Type(name); RESULT.setLine(nameleft); :};
constant::=(NumberConstant) NUMCONST:N1 {: RESULT=new NumberConstant(N1); RESULT.setLine(N1left); :} | (CharacterConstant) CHARCONST:C1 {: RESULT=new CharacterConstant(C1); RESULT.setLine(C1left); :} | (BooleanConstant) BOOLCONST:B1 {: RESULT=new BooleanConstant(B1); RESULT.setLine(B1left); :};
varDecl::=(VarDeclNoError) type:t1 varList:v2 SEMICOLON {: RESULT=new VarDeclNoError(t1, v2); RESULT.setLine(t1left); :}
		| (ErrorVarDecl) error SEMICOLON:e {: parser.syntaxErrorMessages+="Syntax recovery at line "+eleft; :} {: RESULT=new ErrorVarDecl(); :};
varList::=(MultipleVarDecls) var:v1 COMMA varList:v2 {: RESULT=new MultipleVarDecls(v1, v2); RESULT.setLine(v1left); :} | (OneVarDecl) var:v1 {: RESULT=new OneVarDecl(v1); RESULT.setLine(v1left); :};
//error productions - varDecl & varList?
var::=(ScalarVar) IDENTIFIER:name {: RESULT=new ScalarVar(name); RESULT.setLine(nameleft); :} | (ArrayVar) IDENTIFIER:name LSQUARE RSQUARE {: RESULT=new ArrayVar(name); RESULT.setLine(nameleft); :}
		| (ErrorVar) error:e {: parser.syntaxErrorMessages+="Syntax recovery at line "+eleft; :} {: RESULT=new ErrorVar(); :};
	//extends clause? ClassVarDecl?
classDecl::=(ClassDecl) CLASS IDENTIFIER:I1 classExtension:c2 LBRACE localVarDecl:l3 classMethodDecl:c4 RBRACE {: RESULT=new ClassDecl(I1, c2, l3, c4); RESULT.setLine(I1left); :};
classExtension::=(Extension) EXTENDS type:t1 {: RESULT=new Extension(t1); RESULT.setLine(t1left); :} | (NoExtension) {: RESULT=new NoExtension(); :} /*eps*/;
localVarDecl::=(LocalVarDeclarations) varDecl:v1 localVarDecl:l2 {: RESULT=new LocalVarDeclarations(v1, l2); RESULT.setLine(v1left); :} | (NoLocalVarDeclarations) {: RESULT=new NoLocalVarDeclarations(); :} /*eps*/;
classMethodDecl::=(ClassMethods) LBRACE methodDecl:m1 RBRACE {: RESULT=new ClassMethods(m1); RESULT.setLine(m1left); :} | (NoClassMethods) {: RESULT=new NoClassMethods(); :} /*eps*/;
methodDecl::=(MethodDeclarations) methodDecl:m1 methodHeader:m2 LBRACE statementList:s3 RBRACE {: RESULT=new MethodDeclarations(m1, m2, s3); RESULT.setLine(m1left); :} | (NoMethodDeclarations) {: RESULT=new NoMethodDeclarations(); :} /*eps*/;
methodHeader::=(MethodHeader) returnType:r1 methodName:m2 LPAREN formPars:f3 RPAREN localVarDecl:l4 {: RESULT=new MethodHeader(r1, m2, f3, l4); RESULT.setLine(r1left); :};
methodName::=(MethodName) IDENTIFIER:name {: RESULT=new MethodName(name); RESULT.setLine(nameleft); :};
returnType::=(ReturnTypeNonVoid) type:t1 {: RESULT=new ReturnTypeNonVoid(t1); RESULT.setLine(t1left); :} | (ReturnTypeVoid) VOID {: RESULT=new ReturnTypeVoid(); :};
formPars::=(FormalParameters) formParsList:f1 {: RESULT=new FormalParameters(f1); RESULT.setLine(f1left); :} | (NoFormalParameters) {: RESULT=new NoFormalParameters(); :} /*eps*/;
formParsList::=(MultipleFormalParameters) formParsList:f1 COMMA type:t2 var:v3 {: RESULT=new MultipleFormalParameters(f1, t2, v3); RESULT.setLine(f1left); :} | (OneFormalParameter) type:t1 var:v2 {: RESULT=new OneFormalParameter(t1, v2); RESULT.setLine(t1left); :};
statementList::=(Statements) statement:s1 statementList:s2 {: RESULT=new Statements(s1, s2); RESULT.setLine(s1left); :} | (NoStatements) {: RESULT=new NoStatements(); :} /*eps*/;
statement::=(IfsUnmatched) ifChainWithUnmatched:i1 {: RESULT=new IfsUnmatched(i1); RESULT.setLine(i1left); :} | (NotIfsUnmatched) otherStatements:o1 {: RESULT=new NotIfsUnmatched(o1); RESULT.setLine(o1left); :}
			| (ErrorStatement) error SEMICOLON:e {: parser.syntaxErrorMessages+="Syntax recovery at line "+eleft; :} {: RESULT=new ErrorStatement(); :};
ifChainWithUnmatched::=(IfWithoutElse) IF LPAREN condition:c1 RPAREN statement:s2 {: RESULT=new IfWithoutElse(c1, s2); RESULT.setLine(c1left); :} | (IfWithUnmatchedInElse) IF LPAREN condition:c1 RPAREN otherStatements:o2 ELSE ifChainWithUnmatched:i3 {: RESULT=new IfWithUnmatchedInElse(c1, o2, i3); RESULT.setLine(c1left); :};
otherStatements::=(StatementWithDesignator) designatorStatement:d1 SEMICOLON {: RESULT=new StatementWithDesignator(d1); RESULT.setLine(d1left); :}
			| (Break) BREAK SEMICOLON {: RESULT=new Break(); :}
			| (Continue) CONTINUE SEMICOLON {: RESULT=new Continue(); :}
			| (Read) READ LPAREN designator:d1 RPAREN SEMICOLON {: RESULT=new Read(d1); RESULT.setLine(d1left); :}
			| (PrintWithWidth) PRINT LPAREN expr:e1 COMMA NUMCONST:N2 RPAREN SEMICOLON {: RESULT=new PrintWithWidth(e1, N2); RESULT.setLine(e1left); :}
			| (PrintSimple) PRINT LPAREN expr:e1 RPAREN SEMICOLON {: RESULT=new PrintSimple(e1); RESULT.setLine(e1left); :}
			| (ReturnVoid) RETURN SEMICOLON {: RESULT=new ReturnVoid(); :}
			| (ReturnNonVoid) RETURN expr:e1 SEMICOLON {: RESULT=new ReturnNonVoid(e1); RESULT.setLine(e1left); :}
			| (IfWithMatchedInElse) IF LPAREN condition:c1 RPAREN otherStatements:o2 ELSE otherStatements:o3 {: RESULT=new IfWithMatchedInElse(c1, o2, o3); RESULT.setLine(c1left); :}
			| (DoWhileLoop) DO statement:s1 WHILE LPAREN condition:c2 RPAREN SEMICOLON {: RESULT=new DoWhileLoop(s1, c2); RESULT.setLine(s1left); :}
			| (StatementBlock) LBRACE statementList:s1 RBRACE {: RESULT=new StatementBlock(s1); RESULT.setLine(s1left); :};
designatorStatement::=(Assignment) designator:d1 EQUAL expr:e2 {: RESULT=new Assignment(d1, e2); RESULT.setLine(d1left); :}
					| (Increment) designator:d1 PLUSPLUS {: RESULT=new Increment(d1); RESULT.setLine(d1left); :}
					| (Decrement) designator:d1 MINUSMINUS {: RESULT=new Decrement(d1); RESULT.setLine(d1left); :}
					| (FunctionCall) designator:d1 LPAREN actPars:a2 RPAREN {: RESULT=new FunctionCall(d1, a2); RESULT.setLine(d1left); :};
actPars::=(ActualParameters) actParsList:a1 {: RESULT=new ActualParameters(a1); RESULT.setLine(a1left); :} | (NoActualParameters) {: RESULT=new NoActualParameters(); :} /*eps*/;
actParsList::=(MultipleActualParameters) expr:e1 COMMA actParsList:a2 {: RESULT=new MultipleActualParameters(e1, a2); RESULT.setLine(e1left); :} | (OneActualParameter) expr:e1 {: RESULT=new OneActualParameter(e1); RESULT.setLine(e1left); :};
condition::=(ConditionTerm) condTerm:c1 {: RESULT=new ConditionTerm(c1); RESULT.setLine(c1left); :} | (LogicalOr) condTerm:c1 OR condTerm:c2 {: RESULT=new LogicalOr(c1, c2); RESULT.setLine(c1left); :};
condTerm::=(ConditionFact) condFact:c1 {: RESULT=new ConditionFact(c1); RESULT.setLine(c1left); :} | (LogicalAnd) condFact:c1 AND condFact:c2 {: RESULT=new LogicalAnd(c1, c2); RESULT.setLine(c1left); :};
condFact::=(ConditionRelation) expr:e1 relop:r2 expr:e3 {: RESULT=new ConditionRelation(e1, r2, e3); RESULT.setLine(e1left); :} | (ConditionExpression) expr:e1 {: RESULT=new ConditionExpression(e1); RESULT.setLine(e1left); :};
relop::=(EqualOp) EQUALEQUAL {: RESULT=new EqualOp(); :} | (NotEqualOp) NOTEQUAL {: RESULT=new NotEqualOp(); :} | (GreaterOp) GREATER {: RESULT=new GreaterOp(); :} | (GreaterOrEqualOp) GREATEREQUAL {: RESULT=new GreaterOrEqualOp(); :} | (LessOp) LESS {: RESULT=new LessOp(); :} | (LessOrEqualOp) LESSEQUAL {: RESULT=new LessOrEqualOp(); :};
expr::=(ExpressionTerm) term:t1 {: RESULT=new ExpressionTerm(t1); RESULT.setLine(t1left); :} | (ExpressionNegation) MINUS term:t1 {: RESULT=new ExpressionNegation(t1); RESULT.setLine(t1left); :} | (ExpressionAddOp) expr:e1 addop:a2 term:t3 {: RESULT=new ExpressionAddOp(e1, a2, t3); RESULT.setLine(e1left); :}; //Negation here!?
term::=(TermFactor) factor:f1 {: RESULT=new TermFactor(f1); RESULT.setLine(f1left); :} | (TermMulOp) term:t1 mulop:m2 factor:f3 {: RESULT=new TermMulOp(t1, m2, f3); RESULT.setLine(t1left); :};
factor::=(FactorDesignator) designator:d1 {: RESULT=new FactorDesignator(d1); RESULT.setLine(d1left); :} | (FactorConstant) constant:c1 {: RESULT=new FactorConstant(c1); RESULT.setLine(c1left); :} | (FactorExpressionInParentheses) LPAREN expr:e1 RPAREN {: RESULT=new FactorExpressionInParentheses(e1); RESULT.setLine(e1left); :} | (FactorFunctionCall) designator:d1 LPAREN actPars:a2 RPAREN {: RESULT=new FactorFunctionCall(d1, a2); RESULT.setLine(d1left); :} | (FactorNewClassInstance) NEW type:t1 {: RESULT=new FactorNewClassInstance(t1); RESULT.setLine(t1left); :} | (FactorNewArrayAllocation) NEW type:t1 LSQUARE expr:e2 RSQUARE {: RESULT=new FactorNewArrayAllocation(t1, e2); RESULT.setLine(t1left); :};
	//complexDesignator
designator::=(SimpleDesignator) IDENTIFIER:I1 {: RESULT=new SimpleDesignator(I1); RESULT.setLine(I1left); :} | (ClassField) designator:d1 DOT IDENTIFIER:I2 {: RESULT=new ClassField(d1, I2); RESULT.setLine(d1left); :} | (ArrayElementDesignator) designator:d1 LSQUARE expr:e2 RSQUARE {: RESULT=new ArrayElementDesignator(d1, e2); RESULT.setLine(d1left); :};
addop::=(AdditionOp) PLUS {: RESULT=new AdditionOp(); :} | (SubtractionOp) MINUS {: RESULT=new SubtractionOp(); :};
mulop::=(MultiplicationOp) ASTERISK {: RESULT=new MultiplicationOp(); :} | (DivisionOp) SLASH {: RESULT=new DivisionOp(); :} | (ModuleOp) PERCENT {: RESULT=new ModuleOp(); :};