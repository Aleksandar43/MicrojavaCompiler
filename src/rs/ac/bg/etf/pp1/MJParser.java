
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Feb 04 17:40:07 CET 2018
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import rs.ac.bg.etf.pp1.ast.*;
import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Sun Feb 04 17:40:07 CET 2018
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\003\010\000\002\002\004\000\002\042" +
    "\003\000\002\004\004\000\002\004\002\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\007\006\000" +
    "\002\035\005\000\002\035\003\000\002\036\005\000\002" +
    "\043\003\000\002\050\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\010\005\000\002\010\004" +
    "\000\002\012\005\000\002\012\003\000\002\044\003\000" +
    "\002\044\005\000\002\044\003\000\002\011\011\000\002" +
    "\013\004\000\002\013\002\000\002\014\004\000\002\014" +
    "\002\000\002\015\005\000\002\015\002\000\002\005\007" +
    "\000\002\005\002\000\002\041\010\000\002\045\003\000" +
    "\002\051\003\000\002\051\003\000\002\016\003\000\002" +
    "\016\002\000\002\020\006\000\002\020\004\000\002\034" +
    "\004\000\002\034\002\000\002\017\003\000\002\017\003" +
    "\000\002\017\004\000\002\037\007\000\002\037\011\000" +
    "\002\040\004\000\002\040\004\000\002\040\004\000\002" +
    "\040\007\000\002\040\011\000\002\040\007\000\002\040" +
    "\004\000\002\040\005\000\002\040\011\000\002\040\011" +
    "\000\002\040\005\000\002\021\005\000\002\021\004\000" +
    "\002\021\004\000\002\021\006\000\002\022\003\000\002" +
    "\022\002\000\002\024\005\000\002\024\003\000\002\023" +
    "\003\000\002\023\005\000\002\025\003\000\002\025\005" +
    "\000\002\026\005\000\002\026\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\052\003\000\002\052" +
    "\004\000\002\052\005\000\002\030\003\000\002\030\005" +
    "\000\002\031\003\000\002\031\003\000\002\031\005\000" +
    "\002\031\006\000\002\031\004\000\002\031\007\000\002" +
    "\046\003\000\002\046\005\000\002\046\006\000\002\032" +
    "\003\000\002\032\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\004\005\001\002\000\004\002\271\001" +
    "\002\000\004\057\007\001\002\000\014\003\015\006\020" +
    "\022\021\052\ufffd\057\016\001\002\000\014\003\uffff\006" +
    "\uffff\022\uffff\052\uffff\057\uffff\001\002\000\014\003\ufffb" +
    "\006\ufffb\022\ufffb\052\ufffb\057\ufffb\001\002\000\014\003" +
    "\015\006\020\022\021\052\ufffd\057\016\001\002\000\014" +
    "\003\ufffa\006\ufffa\022\ufffa\052\ufffa\057\ufffa\001\002\000" +
    "\004\052\265\001\002\000\006\003\067\057\071\001\002" +
    "\000\004\043\257\001\002\000\054\003\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\043\ufff4\044" +
    "\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\057\ufff4\001\002" +
    "\000\014\003\ufffc\006\ufffc\022\ufffc\052\ufffc\057\ufffc\001" +
    "\002\000\004\057\037\001\002\000\004\057\016\001\002" +
    "\000\004\057\025\001\002\000\004\043\036\001\002\000" +
    "\004\040\031\001\002\000\004\040\ufff5\001\002\000\006" +
    "\043\ufff7\044\027\001\002\000\004\057\025\001\002\000" +
    "\004\043\ufff8\001\002\000\010\054\032\055\035\056\034" +
    "\001\002\000\044\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027" +
    "\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3" +
    "\036\ufff3\037\ufff3\043\ufff3\044\ufff3\047\ufff3\051\ufff3\001" +
    "\002\000\006\043\ufff6\044\ufff6\001\002\000\044\023\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\043\ufff1" +
    "\044\ufff1\047\ufff1\051\ufff1\001\002\000\044\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\043\ufff2\044" +
    "\ufff2\047\ufff2\051\ufff2\001\002\000\014\003\ufff9\006\ufff9" +
    "\022\ufff9\052\ufff9\057\ufff9\001\002\000\006\020\040\052" +
    "\uffe7\001\002\000\004\057\016\001\002\000\004\052\042" +
    "\001\002\000\012\003\015\052\uffe5\053\uffe5\057\016\001" +
    "\002\000\006\052\046\053\uffe3\001\002\000\012\003\015" +
    "\052\uffe5\053\uffe5\057\016\001\002\000\006\052\uffe6\053" +
    "\uffe6\001\002\000\010\015\uffe1\053\uffe1\057\uffe1\001\002" +
    "\000\004\053\050\001\002\000\014\003\uffe9\006\uffe9\022" +
    "\uffe9\052\uffe9\057\uffe9\001\002\000\010\015\056\053\055" +
    "\057\016\001\002\000\004\052\077\001\002\000\004\057" +
    "\060\001\002\000\004\057\uffde\001\002\000\004\053\uffe4" +
    "\001\002\000\004\057\uffdd\001\002\000\004\046\061\001" +
    "\002\000\004\046\uffdf\001\002\000\006\047\uffdb\057\016" +
    "\001\002\000\004\047\075\001\002\000\006\003\067\057" +
    "\071\001\002\000\006\044\065\047\uffdc\001\002\000\004" +
    "\057\016\001\002\000\006\003\067\057\071\001\002\000" +
    "\010\043\uffea\044\uffea\047\uffea\001\002\000\006\044\uffda" +
    "\047\uffda\001\002\000\012\043\uffec\044\uffec\047\uffec\050" +
    "\072\001\002\000\004\051\073\001\002\000\010\043\uffeb" +
    "\044\uffeb\047\uffeb\001\002\000\006\044\uffd9\047\uffd9\001" +
    "\002\000\010\003\015\052\uffe5\057\016\001\002\000\004" +
    "\052\uffe0\001\002\000\030\003\111\005\117\010\106\012" +
    "\112\013\100\014\115\016\116\021\114\052\101\053\uffd7" +
    "\057\113\001\002\000\004\046\252\001\002\000\030\003" +
    "\111\005\117\010\106\012\112\013\100\014\115\016\116" +
    "\021\114\052\101\053\uffd7\057\113\001\002\000\004\043" +
    "\247\001\002\000\032\003\uffd5\005\uffd5\010\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\016\uffd5\017\uffd5\021\uffd5\052\uffd5\053" +
    "\uffd5\057\uffd5\001\002\000\016\040\240\041\243\042\241" +
    "\045\166\046\242\050\164\001\002\000\004\053\237\001" +
    "\002\000\004\046\227\001\002\000\032\003\uffd6\005\uffd6" +
    "\010\uffd6\012\uffd6\013\uffd6\014\uffd6\016\uffd6\017\uffd6\021" +
    "\uffd6\052\uffd6\053\uffd6\057\uffd6\001\002\000\030\003\111" +
    "\005\117\010\106\012\112\013\100\014\115\016\116\021" +
    "\114\052\101\053\uffd7\057\113\001\002\000\004\043\225" +
    "\001\002\000\004\046\215\001\002\000\060\023\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041" +
    "\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7" +
    "\050\uffa7\051\uffa7\001\002\000\004\043\214\001\002\000" +
    "\022\011\126\024\124\043\211\046\136\054\032\055\035" +
    "\056\034\057\113\001\002\000\026\003\111\005\117\010" +
    "\106\012\112\013\100\014\115\016\116\021\114\052\101" +
    "\057\113\001\002\000\004\043\120\001\002\000\034\003" +
    "\uffd0\005\uffd0\007\uffd0\010\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\016\uffd0\017\uffd0\021\uffd0\052\uffd0\053\uffd0\057\uffd0\001" +
    "\002\000\004\017\122\001\002\000\004\046\123\001\002" +
    "\000\020\011\126\024\124\046\136\054\032\055\035\056" +
    "\034\057\113\001\002\000\016\011\126\046\136\054\032" +
    "\055\035\056\034\057\113\001\002\000\006\037\206\047" +
    "\uffbe\001\002\000\004\057\016\001\002\000\004\047\200" +
    "\001\002\000\044\023\uffb2\024\uffb2\025\150\026\147\027" +
    "\146\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\037\uffb2\043\uffb2\044\uffb2\047\uffb2\051\uffb2\001" +
    "\002\000\052\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad" +
    "\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036" +
    "\uffad\037\uffad\043\uffad\044\uffad\045\166\046\165\047\uffad" +
    "\050\164\051\uffad\001\002\000\044\023\uffac\024\uffac\025" +
    "\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac" +
    "\034\uffac\035\uffac\036\uffac\037\uffac\043\uffac\044\uffac\047" +
    "\uffac\051\uffac\001\002\000\044\023\uffaf\024\uffaf\025\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\037\uffaf\043\uffaf\044\uffaf\047\uffaf" +
    "\051\uffaf\001\002\000\010\036\162\037\uffbc\047\uffbc\001" +
    "\002\000\030\023\142\024\143\030\153\031\152\032\154" +
    "\033\160\034\156\035\155\036\uffb9\037\uffb9\047\uffb9\001" +
    "\002\000\020\011\126\024\124\046\136\054\032\055\035" +
    "\056\034\057\113\001\002\000\010\023\142\024\143\047" +
    "\140\001\002\000\044\023\uffab\024\uffab\025\uffab\026\uffab" +
    "\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035" +
    "\uffab\036\uffab\037\uffab\043\uffab\044\uffab\047\uffab\051\uffab" +
    "\001\002\000\016\011\126\046\136\054\032\055\035\056" +
    "\034\057\113\001\002\000\016\011\uffa4\046\uffa4\054\uffa4" +
    "\055\uffa4\056\uffa4\057\uffa4\001\002\000\016\011\uffa3\046" +
    "\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\001\002\000\044" +
    "\023\uffb0\024\uffb0\025\150\026\147\027\146\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\043\uffb0\044\uffb0\047\uffb0\051\uffb0\001\002\000\016\011" +
    "\126\046\136\054\032\055\035\056\034\057\113\001\002" +
    "\000\016\011\uffa0\046\uffa0\054\uffa0\055\uffa0\056\uffa0\057" +
    "\uffa0\001\002\000\016\011\uffa1\046\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\057\uffa1\001\002\000\016\011\uffa2\046\uffa2\054" +
    "\uffa2\055\uffa2\056\uffa2\057\uffa2\001\002\000\044\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\043\uffae" +
    "\044\uffae\047\uffae\051\uffae\001\002\000\020\011\uffb7\024" +
    "\uffb7\046\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\001\002" +
    "\000\020\011\uffb8\024\uffb8\046\uffb8\054\uffb8\055\uffb8\056" +
    "\uffb8\057\uffb8\001\002\000\020\011\uffb6\024\uffb6\046\uffb6" +
    "\054\uffb6\055\uffb6\056\uffb6\057\uffb6\001\002\000\020\011" +
    "\uffb3\024\uffb3\046\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\001\002\000\020\011\uffb4\024\uffb4\046\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\001\002\000\020\011\126\024\124" +
    "\046\136\054\032\055\035\056\034\057\113\001\002\000" +
    "\020\011\uffb5\024\uffb5\046\uffb5\054\uffb5\055\uffb5\056\uffb5" +
    "\057\uffb5\001\002\000\014\023\142\024\143\036\uffba\037" +
    "\uffba\047\uffba\001\002\000\020\011\126\024\124\046\136" +
    "\054\032\055\035\056\034\057\113\001\002\000\006\037" +
    "\uffbb\047\uffbb\001\002\000\020\011\126\024\124\046\136" +
    "\054\032\055\035\056\034\057\113\001\002\000\022\011" +
    "\126\024\124\046\136\047\uffc1\054\032\055\035\056\034" +
    "\057\113\001\002\000\004\057\167\001\002\000\060\023" +
    "\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\050\uffa6\051\uffa6\001\002\000\004\047\175\001" +
    "\002\000\004\047\uffc2\001\002\000\012\023\142\024\143" +
    "\044\173\047\uffbf\001\002\000\020\011\126\024\124\046" +
    "\136\054\032\055\035\056\034\057\113\001\002\000\004" +
    "\047\uffc0\001\002\000\044\023\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\037\uffaa\043\uffaa\044\uffaa\047\uffaa\051" +
    "\uffaa\001\002\000\010\023\142\024\143\051\177\001\002" +
    "\000\060\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030" +
    "\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\001\002\000\004" +
    "\043\201\001\002\000\034\003\uffc8\005\uffc8\007\uffc8\010" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\016\uffc8\017\uffc8\021\uffc8" +
    "\052\uffc8\053\uffc8\057\uffc8\001\002\000\046\023\uffa9\024" +
    "\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\043\uffa9\044" +
    "\uffa9\047\uffa9\050\203\051\uffa9\001\002\000\020\011\126" +
    "\024\124\046\136\054\032\055\035\056\034\057\113\001" +
    "\002\000\010\023\142\024\143\051\205\001\002\000\044" +
    "\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8" +
    "\043\uffa8\044\uffa8\047\uffa8\051\uffa8\001\002\000\020\011" +
    "\126\024\124\046\136\054\032\055\035\056\034\057\113" +
    "\001\002\000\004\047\uffbd\001\002\000\044\023\uffb1\024" +
    "\uffb1\025\150\026\147\027\146\030\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\043\uffb1\044" +
    "\uffb1\047\uffb1\051\uffb1\001\002\000\034\003\uffcb\005\uffcb" +
    "\007\uffcb\010\uffcb\012\uffcb\013\uffcb\014\uffcb\016\uffcb\017" +
    "\uffcb\021\uffcb\052\uffcb\053\uffcb\057\uffcb\001\002\000\010" +
    "\023\142\024\143\043\213\001\002\000\034\003\uffca\005" +
    "\uffca\007\uffca\010\uffca\012\uffca\013\uffca\014\uffca\016\uffca" +
    "\017\uffca\021\uffca\052\uffca\053\uffca\057\uffca\001\002\000" +
    "\034\003\uffcf\005\uffcf\007\uffcf\010\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\016\uffcf\017\uffcf\021\uffcf\052\uffcf\053\uffcf\057" +
    "\uffcf\001\002\000\020\011\126\024\124\046\136\054\032" +
    "\055\035\056\034\057\113\001\002\000\012\023\142\024" +
    "\143\044\217\047\220\001\002\000\004\054\222\001\002" +
    "\000\004\043\221\001\002\000\034\003\uffcc\005\uffcc\007" +
    "\uffcc\010\uffcc\012\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc" +
    "\021\uffcc\052\uffcc\053\uffcc\057\uffcc\001\002\000\004\047" +
    "\223\001\002\000\004\043\224\001\002\000\034\003\uffcd" +
    "\005\uffcd\007\uffcd\010\uffcd\012\uffcd\013\uffcd\014\uffcd\016" +
    "\uffcd\017\uffcd\021\uffcd\052\uffcd\053\uffcd\057\uffcd\001\002" +
    "\000\032\003\uffd4\005\uffd4\010\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\016\uffd4\017\uffd4\021\uffd4\052\uffd4\053\uffd4\057\uffd4" +
    "\001\002\000\004\053\uffd8\001\002\000\020\011\126\024" +
    "\124\046\136\054\032\055\035\056\034\057\113\001\002" +
    "\000\004\047\231\001\002\000\026\003\111\005\117\010" +
    "\106\012\112\013\100\014\115\016\116\021\114\052\101" +
    "\057\113\001\002\000\034\003\uffd5\005\uffd5\007\234\010" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\016\uffd5\017\uffd5\021\uffd5" +
    "\052\uffd5\053\uffd5\057\uffd5\001\002\000\032\003\uffd3\005" +
    "\uffd3\010\uffd3\012\uffd3\013\uffd3\014\uffd3\016\uffd3\017\uffd3" +
    "\021\uffd3\052\uffd3\053\uffd3\057\uffd3\001\002\000\024\005" +
    "\117\010\106\012\112\013\100\014\115\016\116\021\114" +
    "\052\101\057\113\001\002\000\034\003\uffc9\005\uffc9\007" +
    "\uffc9\010\uffc9\012\uffc9\013\uffc9\014\uffc9\016\uffc9\017\uffc9" +
    "\021\uffc9\052\uffc9\053\uffc9\057\uffc9\001\002\000\032\003" +
    "\uffd2\005\uffd2\010\uffd2\012\uffd2\013\uffd2\014\uffd2\016\uffd2" +
    "\017\uffd2\021\uffd2\052\uffd2\053\uffd2\057\uffd2\001\002\000" +
    "\010\015\uffe2\053\uffe2\057\uffe2\001\002\000\020\011\126" +
    "\024\124\046\136\054\032\055\035\056\034\057\113\001" +
    "\002\000\004\043\uffc4\001\002\000\022\011\126\024\124" +
    "\046\136\047\uffc1\054\032\055\035\056\034\057\113\001" +
    "\002\000\004\043\uffc5\001\002\000\004\047\245\001\002" +
    "\000\004\043\uffc3\001\002\000\010\023\142\024\143\043" +
    "\uffc6\001\002\000\034\003\uffd1\005\uffd1\007\uffd1\010\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\016\uffd1\017\uffd1\021\uffd1\052" +
    "\uffd1\053\uffd1\057\uffd1\001\002\000\004\053\251\001\002" +
    "\000\034\003\uffc7\005\uffc7\007\uffc7\010\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\016\uffc7\017\uffc7\021\uffc7\052\uffc7\053\uffc7" +
    "\057\uffc7\001\002\000\004\057\113\001\002\000\010\045" +
    "\166\047\254\050\164\001\002\000\004\043\255\001\002" +
    "\000\034\003\uffce\005\uffce\007\uffce\010\uffce\012\uffce\013" +
    "\uffce\014\uffce\016\uffce\017\uffce\021\uffce\052\uffce\053\uffce" +
    "\057\uffce\001\002\000\004\052\uffe8\001\002\000\016\003" +
    "\uffef\006\uffef\022\uffef\052\uffef\053\uffef\057\uffef\001\002" +
    "\000\004\043\264\001\002\000\006\043\uffed\044\262\001" +
    "\002\000\006\003\067\057\071\001\002\000\004\043\uffee" +
    "\001\002\000\016\003\ufff0\006\ufff0\022\ufff0\052\ufff0\053" +
    "\ufff0\057\ufff0\001\002\000\010\015\uffe1\053\uffe1\057\uffe1" +
    "\001\002\000\010\015\056\053\267\057\016\001\002\000" +
    "\004\002\001\001\002\000\004\052\ufffe\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\003\003\001\001\000\002\001\001\000" +
    "\004\042\005\001\001\000\016\004\012\006\010\007\016" +
    "\010\007\011\011\050\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\267\006\010\007\016\010\007" +
    "\011\011\050\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\257\044\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\021\001\001\000\010\035\022\036\025\043\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\035\027\036\025\043\023" +
    "\001\001\000\002\001\001\000\004\047\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\040\001\001\000" +
    "\004\050\255\001\001\000\002\001\001\000\010\010\043" +
    "\014\042\050\013\001\001\000\004\015\046\001\001\000" +
    "\010\010\043\014\044\050\013\001\001\000\002\001\001" +
    "\000\004\005\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\041\051\050\053\051\052\001\001\000\002" +
    "\001\001\000\004\045\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\061\020\063\050\062\001\001\000" +
    "\002\001\001\000\004\044\073\001\001\000\002\001\001" +
    "\000\004\050\065\001\001\000\004\044\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\043\014\075\050\013\001\001\000\002\001\001\000\016" +
    "\017\107\021\101\034\104\037\106\040\102\046\103\001" +
    "\001\000\002\001\001\000\016\017\107\021\101\034\247" +
    "\037\106\040\102\046\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\107\021\101\034" +
    "\225\037\106\040\102\046\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\030\127\031\132\046\130\047\131\052\211\001\001" +
    "\000\014\017\120\021\101\037\106\040\102\046\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\023\126\025\124\026\133\030" +
    "\127\031\132\046\130\047\131\052\134\001\001\000\012" +
    "\030\207\031\132\046\130\047\131\001\001\000\002\001" +
    "\001\000\004\050\201\001\001\000\002\001\001\000\004" +
    "\033\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\156\032\140" +
    "\001\001\000\014\030\127\031\132\046\130\047\131\052" +
    "\136\001\001\000\004\032\140\001\001\000\002\001\001" +
    "\000\012\030\143\031\132\046\130\047\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\144\001\001" +
    "\000\010\031\150\046\130\047\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\030\127\031\132" +
    "\046\130\047\131\052\160\001\001\000\002\001\001\000" +
    "\004\032\140\001\001\000\016\026\162\030\127\031\132" +
    "\046\130\047\131\052\134\001\001\000\002\001\001\000" +
    "\014\030\127\031\132\046\130\047\131\052\175\001\001" +
    "\000\020\022\167\024\170\030\127\031\132\046\130\047" +
    "\131\052\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\140\001" +
    "\001\000\016\024\173\030\127\031\132\046\130\047\131" +
    "\052\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\030\127\031" +
    "\132\046\130\047\131\052\203\001\001\000\004\032\140" +
    "\001\001\000\002\001\001\000\020\025\206\026\133\030" +
    "\127\031\132\046\130\047\131\052\134\001\001\000\002" +
    "\001\001\000\004\033\144\001\001\000\002\001\001\000" +
    "\004\032\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\030\127\031\132\046\130\047\131\052\215\001" +
    "\001\000\004\032\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\023\227\025\124\026\133\030\127\031\132\046" +
    "\130\047\131\052\134\001\001\000\002\001\001\000\014" +
    "\017\232\021\101\037\106\040\231\046\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\101\037\235" +
    "\040\234\046\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\030\127\031\132\046\130" +
    "\047\131\052\245\001\001\000\002\001\001\000\020\022" +
    "\243\024\170\030\127\031\132\046\130\047\131\052\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\262\044\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\265\001\001\000\010\041" +
    "\051\050\053\051\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	int syntaxErrors=0;
	String syntaxErrorMessages="";
	
	public int getSyntaxErrors(){return syntaxErrors;}
	public String getSyntaxErrorMessages(){return syntaxErrorMessages;}

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSyntax error", cur_token);
    }

    public void report_error(String message, Object info) {
    	syntaxErrors++;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left).append(": ").append(((Symbol) info).value);
        /*System.out.println(msg.toString());*/
		syntaxErrorMessages+=msg.toString()+"\n";
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" at line ").append(((Symbol)info).left).append(": ").append(((Symbol) info).value);
        /*System.out.println(msg.toString());*/
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // mulop ::= PERCENT 
            {
              Mulop RESULT = null;
		 RESULT=new ModuleOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // mulop ::= SLASH 
            {
              Mulop RESULT = null;
		 RESULT=new DivisionOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // mulop ::= ASTERISK 
            {
              Mulop RESULT = null;
		 RESULT=new MultiplicationOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // addop ::= MINUS 
            {
              Addop RESULT = null;
		 RESULT=new SubtractionOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // addop ::= PLUS 
            {
              Addop RESULT = null;
		 RESULT=new AdditionOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // designator ::= designator LSQUARE expr RSQUARE 
            {
              Designator RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ArrayElementDesignator(d1, e2); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // designator ::= designator DOT IDENTIFIER 
            {
              Designator RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int I2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int I2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String I2 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ClassField(d1, I2); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // designator ::= IDENTIFIER 
            {
              Designator RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String I1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new SimpleDesignator(I1); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // factor ::= NEW type LSQUARE expr RSQUARE 
            {
              Factor RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorNewArrayAllocation(t1, e2); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // factor ::= NEW type 
            {
              Factor RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorNewClassInstance(t1); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // factor ::= designator LPAREN actPars RPAREN 
            {
              Factor RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActPars a2 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorFunctionCall(d1, a2); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // factor ::= LPAREN expr RPAREN 
            {
              Factor RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorExpressionInParentheses(e1); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // factor ::= constant 
            {
              Factor RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Constant c1 = (Constant)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorConstant(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // factor ::= designator 
            {
              Factor RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorDesignator(d1); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // term ::= term mulop factor 
            {
              Term RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Mulop m2 = (Mulop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int f3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int f3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor f3 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermMulOp(t1, m2, f3); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // term ::= factor 
            {
              Term RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor f1 = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermFactor(f1); RESULT.setLine(f1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= expr addop term 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Addop a2 = (Addop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term t3 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExpressionAddOp(e1, a2, t3); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= MINUS term 
            {
              Expr RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExpressionNegation(t1); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= term 
            {
              Expr RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExpressionTerm(t1); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // relop ::= LESSEQUAL 
            {
              Relop RESULT = null;
		 RESULT=new LessOrEqualOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // relop ::= LESS 
            {
              Relop RESULT = null;
		 RESULT=new LessOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // relop ::= GREATEREQUAL 
            {
              Relop RESULT = null;
		 RESULT=new GreaterOrEqualOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // relop ::= GREATER 
            {
              Relop RESULT = null;
		 RESULT=new GreaterOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // relop ::= NOTEQUAL 
            {
              Relop RESULT = null;
		 RESULT=new NotEqualOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // relop ::= EQUALEQUAL 
            {
              Relop RESULT = null;
		 RESULT=new EqualOp(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condFact ::= expr 
            {
              CondFact RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionExpression(e1); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*condFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condFact ::= expr relop expr 
            {
              CondFact RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Relop r2 = (Relop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionRelation(e1, r2, e3); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*condFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condTerm ::= condFact AND condFact 
            {
              CondTerm RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondFact c1 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact c2 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new LogicalAnd(c1, c2); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*condTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condTerm ::= condFact 
            {
              CondTerm RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact c1 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionFact(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*condTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condition ::= condTerm OR condTerm 
            {
              Condition RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondTerm c1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm c2 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new LogicalOr(c1, c2); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // condition ::= condTerm 
            {
              Condition RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm c1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConditionTerm(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // actParsList ::= expr 
            {
              ActParsList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OneActualParameter(e1); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*actParsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // actParsList ::= expr COMMA actParsList 
            {
              ActParsList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ActParsList a2 = (ActParsList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MultipleActualParameters(e1, a2); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*actParsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // actPars ::= 
            {
              ActPars RESULT = null;
		 RESULT=new NoActualParameters(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*actPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // actPars ::= actParsList 
            {
              ActPars RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ActParsList a1 = (ActParsList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActualParameters(a1); RESULT.setLine(a1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*actPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // designatorStatement ::= designator LPAREN actPars RPAREN 
            {
              DesignatorStatement RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActPars a2 = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FunctionCall(d1, a2); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // designatorStatement ::= designator MINUSMINUS 
            {
              DesignatorStatement RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Decrement(d1); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // designatorStatement ::= designator PLUSPLUS 
            {
              DesignatorStatement RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Increment(d1); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // designatorStatement ::= designator EQUAL expr 
            {
              DesignatorStatement RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Assignment(d1, e2); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // otherStatements ::= LBRACE statementList RBRACE 
            {
              OtherStatements RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList s1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StatementBlock(s1); RESULT.setLine(s1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*otherStatements*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // otherStatements ::= DO statement WHILE LPAREN condition RPAREN SEMICOLON 
            {
              OtherStatements RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition c2 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new DoWhileLoop(s1, c2); RESULT.setLine(s1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*otherStatements*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // otherStatements ::= IF LPAREN condition RPAREN otherStatements ELSE otherStatements 
            {
              OtherStatements RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		OtherStatements o2 = (OtherStatements)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int o3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int o3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		OtherStatements o3 = (OtherStatements)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IfWithMatchedInElse(c1, o2, o3); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*otherStatements*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // otherStatements ::= RETURN expr SEMICOLON 
            {
              OtherStatements RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ReturnNonVoid(e1); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*otherStatements*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // otherStatements ::= RETURN SEMICOLON 
            {
              OtherStatements RESULT = null;
		 RESULT=new ReturnVoid(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*otherStatements*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // otherStatements ::= PRINT LPAREN expr RPAREN SEMICOLON 
            {
              OtherStatements RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new PrintSimple(e1); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*otherStatements*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // otherStatements ::= PRINT LPAREN expr COMMA NUMCONST RPAREN SEMICOLON 
            {
              OtherStatements RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer N2 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new PrintWithWidth(e1, N2); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*otherStatements*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // otherStatements ::= READ LPAREN designator RPAREN SEMICOLON 
            {
              OtherStatements RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator d1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new Read(d1); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*otherStatements*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // otherStatements ::= CONTINUE SEMICOLON 
            {
              OtherStatements RESULT = null;
		 RESULT=new Continue(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*otherStatements*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // otherStatements ::= BREAK SEMICOLON 
            {
              OtherStatements RESULT = null;
		 RESULT=new Break(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*otherStatements*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // otherStatements ::= designatorStatement SEMICOLON 
            {
              OtherStatements RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorStatement d1 = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StatementWithDesignator(d1); RESULT.setLine(d1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*otherStatements*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ifChainWithUnmatched ::= IF LPAREN condition RPAREN otherStatements ELSE ifChainWithUnmatched 
            {
              IfChainWithUnmatched RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		OtherStatements o2 = (OtherStatements)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		IfChainWithUnmatched i3 = (IfChainWithUnmatched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IfWithUnmatchedInElse(c1, o2, i3); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*ifChainWithUnmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ifChainWithUnmatched ::= IF LPAREN condition RPAREN statement 
            {
              IfChainWithUnmatched RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition c1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IfWithoutElse(c1, s2); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*ifChainWithUnmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= error SEMICOLON 
            {
              Statement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.syntaxErrorMessages+="Syntax recovery at line "+eleft;  RESULT=new ErrorStatement(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= otherStatements 
            {
              Statement RESULT = null;
		int o1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		OtherStatements o1 = (OtherStatements)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NotIfsUnmatched(o1); RESULT.setLine(o1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= ifChainWithUnmatched 
            {
              Statement RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		IfChainWithUnmatched i1 = (IfChainWithUnmatched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IfsUnmatched(i1); RESULT.setLine(i1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statementList ::= 
            {
              StatementList RESULT = null;
		 RESULT=new NoStatements(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*statementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statementList ::= statement statementList 
            {
              StatementList RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		StatementList s2 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Statements(s1, s2); RESULT.setLine(s1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*statementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // formParsList ::= type var 
            {
              FormParsList RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Var v2 = (Var)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OneFormalParameter(t1, v2); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*formParsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // formParsList ::= formParsList COMMA type var 
            {
              FormParsList RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		FormParsList f1 = (FormParsList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Var v3 = (Var)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MultipleFormalParameters(f1, t2, v3); RESULT.setLine(f1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*formParsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // formPars ::= 
            {
              FormPars RESULT = null;
		 RESULT=new NoFormalParameters(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*formPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // formPars ::= formParsList 
            {
              FormPars RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormParsList f1 = (FormParsList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormalParameters(f1); RESULT.setLine(f1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*formPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // returnType ::= VOID 
            {
              ReturnType RESULT = null;
		 RESULT=new ReturnTypeVoid(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*returnType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // returnType ::= type 
            {
              ReturnType RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ReturnTypeNonVoid(t1); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*returnType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // methodName ::= IDENTIFIER 
            {
              MethodName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodName(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*methodName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // methodHeader ::= returnType methodName LPAREN formPars RPAREN localVarDecl 
            {
              MethodHeader RESULT = null;
		int r1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		ReturnType r1 = (ReturnType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		MethodName m2 = (MethodName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int f3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int f3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FormPars f3 = (FormPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int l4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int l4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		LocalVarDecl l4 = (LocalVarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodHeader(r1, m2, f3, l4); RESULT.setLine(r1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*methodHeader*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // methodDecl ::= 
            {
              MethodDecl RESULT = null;
		 RESULT=new NoMethodDeclarations(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*methodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // methodDecl ::= methodDecl methodHeader LBRACE statementList RBRACE 
            {
              MethodDecl RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		MethodDecl m1 = (MethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		MethodHeader m2 = (MethodHeader)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList s3 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDeclarations(m1, m2, s3); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*methodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // classMethodDecl ::= 
            {
              ClassMethodDecl RESULT = null;
		 RESULT=new NoClassMethods(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*classMethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // classMethodDecl ::= LBRACE methodDecl RBRACE 
            {
              ClassMethodDecl RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDecl m1 = (MethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ClassMethods(m1); RESULT.setLine(m1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*classMethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // localVarDecl ::= 
            {
              LocalVarDecl RESULT = null;
		 RESULT=new NoLocalVarDeclarations(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*localVarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // localVarDecl ::= varDecl localVarDecl 
            {
              LocalVarDecl RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDecl v1 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		LocalVarDecl l2 = (LocalVarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new LocalVarDeclarations(v1, l2); RESULT.setLine(v1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*localVarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // classExtension ::= 
            {
              ClassExtension RESULT = null;
		 RESULT=new NoExtension(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*classExtension*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // classExtension ::= EXTENDS type 
            {
              ClassExtension RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Extension(t1); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*classExtension*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // classDecl ::= CLASS IDENTIFIER classExtension LBRACE localVarDecl classMethodDecl RBRACE 
            {
              ClassDecl RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String I1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ClassExtension c2 = (ClassExtension)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int l3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		LocalVarDecl l3 = (LocalVarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int c4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ClassMethodDecl c4 = (ClassMethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ClassDecl(I1, c2, l3, c4); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*classDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var ::= error 
            {
              Var RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.syntaxErrorMessages+="Syntax recovery at line "+eleft;  RESULT=new ErrorVar(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*var*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var ::= IDENTIFIER LSQUARE RSQUARE 
            {
              Var RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new ArrayVar(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*var*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var ::= IDENTIFIER 
            {
              Var RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ScalarVar(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*var*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // varList ::= var 
            {
              VarList RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Var v1 = (Var)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OneVarDecl(v1); RESULT.setLine(v1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*varList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varList ::= var COMMA varList 
            {
              VarList RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Var v1 = (Var)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarList v2 = (VarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MultipleVarDecls(v1, v2); RESULT.setLine(v1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*varList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // varDecl ::= error SEMICOLON 
            {
              VarDecl RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.syntaxErrorMessages+="Syntax recovery at line "+eleft;  RESULT=new ErrorVarDecl(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*varDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // varDecl ::= type varList SEMICOLON 
            {
              VarDecl RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarList v2 = (VarList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new VarDeclNoError(t1, v2); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*varDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constant ::= BOOLCONST 
            {
              Constant RESULT = null;
		int B1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Boolean B1 = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new BooleanConstant(B1); RESULT.setLine(B1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*constant*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constant ::= CHARCONST 
            {
              Constant RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Character C1 = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CharacterConstant(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*constant*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constant ::= NUMCONST 
            {
              Constant RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new NumberConstant(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*constant*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= IDENTIFIER 
            {
              Type RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Type(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constName ::= IDENTIFIER 
            {
              ConstName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstName(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*constName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constAssignment ::= constName EQUAL constant 
            {
              ConstAssignment RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConstName c1 = (ConstName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Constant c2 = (Constant)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstAssignment(c1, c2); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*constAssignment*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constAssignmentList ::= constAssignment 
            {
              ConstAssignmentList RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstAssignment c1 = (ConstAssignment)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new OneConstAssignment(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*constAssignmentList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constAssignmentList ::= constAssignment COMMA constAssignmentList 
            {
              ConstAssignmentList RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConstAssignment c1 = (ConstAssignment)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstAssignmentList c2 = (ConstAssignmentList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MultipleConstAssignments(c1, c2); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*constAssignmentList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constDecl ::= CONST type constAssignmentList SEMICOLON 
            {
              ConstDecl RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstAssignmentList c2 = (ConstAssignmentList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstDecl(t1, c2); RESULT.setLine(t1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*constDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // programDecl ::= classDecl 
            {
              ProgramDecl RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ClassDecl c1 = (ClassDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgramDeclClass(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*programDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // programDecl ::= varDecl 
            {
              ProgramDecl RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl v1 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgramDeclVar(v1); RESULT.setLine(v1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*programDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programDecl ::= constDecl 
            {
              ProgramDecl RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstDecl c1 = (ConstDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgramDeclConstant(c1); RESULT.setLine(c1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*programDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programDeclList ::= 
            {
              ProgramDeclList RESULT = null;
		 RESULT=new NoProgramDeclarations(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*programDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programDeclList ::= programDecl programDeclList 
            {
              ProgramDeclList RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ProgramDecl p1 = (ProgramDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ProgramDeclList p2 = (ProgramDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgramDeclarations(p1, p2); RESULT.setLine(p1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*programDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programName ::= IDENTIFIER 
            {
              ProgramName RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ProgramName(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*programName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM programName programDeclList LBRACE methodDecl RBRACE 
            {
              Program RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ProgramName p1 = (ProgramName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		ProgramDeclList p2 = (ProgramDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int m3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int m3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDecl m3 = (MethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Program(p1, p2, m3); RESULT.setLine(p1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

