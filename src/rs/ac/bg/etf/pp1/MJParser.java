
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Jan 28 17:40:50 CET 2018
//----------------------------------------------------

package rs.ac.bg.etf.pp1;


/** CUP v0.10k generated parser.
  * @version Sun Jan 28 17:40:50 CET 2018
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\003\010\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\007\010\000\002\012\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\010\005\000\002\014\005\000\002\014\003\000\002\015" +
    "\003\000\002\015\005\000\002\011\012\000\002\016\004" +
    "\000\002\016\002\000\002\017\004\000\002\017\002\000" +
    "\002\020\005\000\002\020\002\000\002\005\014\000\002" +
    "\005\002\000\002\021\003\000\002\021\003\000\002\022" +
    "\003\000\002\022\002\000\002\024\006\000\002\024\004" +
    "\000\002\041\004\000\002\041\002\000\002\023\004\000" +
    "\002\025\005\000\002\025\004\000\002\025\004\000\002" +
    "\025\006\000\002\025\003\000\002\025\003\000\002\025" +
    "\006\000\002\025\010\000\002\025\006\000\002\025\003" +
    "\000\002\025\004\000\002\025\007\000\002\025\011\000" +
    "\002\025\010\000\002\025\005\000\002\030\005\000\002" +
    "\030\002\000\002\031\003\000\002\031\005\000\002\032" +
    "\003\000\002\032\005\000\002\033\005\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\027\003\000\002" +
    "\027\004\000\002\027\005\000\002\035\003\000\002\035" +
    "\005\000\002\036\003\000\002\036\003\000\002\036\005" +
    "\000\002\036\004\000\002\036\007\000\002\026\003\000" +
    "\002\026\005\000\002\026\006\000\002\037\003\000\002" +
    "\037\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\004\004\005\001\002\000\004\002\235\001" +
    "\002\000\004\057\006\001\002\000\012\006\016\022\017" +
    "\052\ufffe\057\014\001\002\000\012\006\ufffc\022\ufffc\052" +
    "\ufffc\057\ufffc\001\002\000\012\006\016\022\017\052\ufffe" +
    "\057\014\001\002\000\012\006\ufffb\022\ufffb\052\ufffb\057" +
    "\ufffb\001\002\000\004\052\231\001\002\000\004\057\055" +
    "\001\002\000\052\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\037\ufff9\043\ufff9\044\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\057\ufff9\001\002\000\012\006\ufffd\022\ufffd" +
    "\052\ufffd\057\ufffd\001\002\000\004\057\030\001\002\000" +
    "\004\057\014\001\002\000\004\057\021\001\002\000\004" +
    "\040\022\001\002\000\010\054\023\055\026\056\025\001" +
    "\002\000\044\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036" +
    "\ufff8\037\ufff8\043\ufff8\044\ufff8\047\ufff8\051\ufff8\001\002" +
    "\000\004\043\027\001\002\000\044\023\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6" +
    "\034\ufff6\035\ufff6\036\ufff6\037\ufff6\043\ufff6\044\ufff6\047" +
    "\ufff6\051\ufff6\001\002\000\044\023\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\036\ufff7\037\ufff7\043\ufff7\044\ufff7\047\ufff7" +
    "\051\ufff7\001\002\000\012\006\ufffa\022\ufffa\052\ufffa\057" +
    "\ufffa\001\002\000\006\020\031\052\uffee\001\002\000\004" +
    "\057\014\001\002\000\004\052\033\001\002\000\010\052" +
    "\uffec\053\uffec\057\014\001\002\000\006\052\037\053\uffea" +
    "\001\002\000\010\052\uffec\053\uffec\057\014\001\002\000" +
    "\006\052\uffed\053\uffed\001\002\000\010\015\046\053\uffe8" +
    "\057\014\001\002\000\004\053\041\001\002\000\004\043" +
    "\042\001\002\000\012\006\ufff0\022\ufff0\052\ufff0\057\ufff0" +
    "\001\002\000\004\053\222\001\002\000\004\057\047\001" +
    "\002\000\004\057\uffe7\001\002\000\004\057\uffe6\001\002" +
    "\000\004\046\050\001\002\000\006\047\uffe4\057\014\001" +
    "\002\000\004\047\062\001\002\000\004\057\055\001\002" +
    "\000\004\047\uffe5\001\002\000\006\044\060\047\uffe2\001" +
    "\002\000\012\043\ufff2\044\ufff2\047\ufff2\050\056\001\002" +
    "\000\004\051\057\001\002\000\010\043\ufff1\044\ufff1\047" +
    "\ufff1\001\002\000\004\057\014\001\002\000\004\047\uffe3" +
    "\001\002\000\006\052\uffec\057\014\001\002\000\004\052" +
    "\064\001\002\000\026\005\101\010\072\012\074\013\065" +
    "\014\077\016\100\021\076\052\066\053\uffe0\057\075\001" +
    "\002\000\004\046\217\001\002\000\024\005\101\010\072" +
    "\012\074\013\065\014\077\016\100\021\076\052\066\057" +
    "\075\001\002\000\004\043\214\001\002\000\016\040\202" +
    "\041\205\042\203\045\146\046\204\050\145\001\002\000" +
    "\004\053\200\001\002\000\004\046\172\001\002\000\026" +
    "\005\101\010\072\012\074\013\065\014\077\016\100\021" +
    "\076\052\066\053\uffe0\057\075\001\002\000\004\046\163" +
    "\001\002\000\060\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\001\002" +
    "\000\004\043\uffd9\001\002\000\022\011\107\024\105\043" +
    "\uffd5\046\117\054\023\055\026\056\025\057\075\001\002" +
    "\000\024\005\101\010\072\012\074\013\065\014\077\016" +
    "\100\021\076\052\066\057\075\001\002\000\004\043\uffda" +
    "\001\002\000\004\017\103\001\002\000\004\046\104\001" +
    "\002\000\020\011\107\024\105\046\117\054\023\055\026" +
    "\056\025\057\075\001\002\000\016\011\107\046\117\054" +
    "\023\055\026\056\025\057\075\001\002\000\006\037\157" +
    "\047\uffcd\001\002\000\004\057\014\001\002\000\004\047" +
    "\152\001\002\000\044\023\uffc2\024\uffc2\025\131\026\130" +
    "\027\127\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\043\uffc2\044\uffc2\047\uffc2\051\uffc2" +
    "\001\002\000\050\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\uffbd\043\uffbd\044\uffbd\045\146\047\uffbd\050" +
    "\145\051\uffbd\001\002\000\044\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\043\uffbc\044\uffbc\047\uffbc" +
    "\051\uffbc\001\002\000\044\023\uffbf\024\uffbf\025\uffbf\026" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\043\uffbf\044\uffbf\047\uffbf\051" +
    "\uffbf\001\002\000\010\036\143\037\uffcb\047\uffcb\001\002" +
    "\000\022\023\123\024\124\030\134\031\133\032\136\033" +
    "\141\034\137\035\135\001\002\000\020\011\107\024\105" +
    "\046\117\054\023\055\026\056\025\057\075\001\002\000" +
    "\010\023\123\024\124\047\121\001\002\000\044\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\043\uffbb" +
    "\044\uffbb\047\uffbb\051\uffbb\001\002\000\016\011\107\046" +
    "\117\054\023\055\026\056\025\057\075\001\002\000\016" +
    "\011\uffb5\046\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\001" +
    "\002\000\016\011\uffb4\046\uffb4\054\uffb4\055\uffb4\056\uffb4" +
    "\057\uffb4\001\002\000\044\023\uffc0\024\uffc0\025\131\026" +
    "\130\027\127\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\043\uffc0\044\uffc0\047\uffc0\051" +
    "\uffc0\001\002\000\016\011\107\046\117\054\023\055\026" +
    "\056\025\057\075\001\002\000\016\011\uffb1\046\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\001\002\000\016\011\uffb2" +
    "\046\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\001\002\000" +
    "\016\011\uffb3\046\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\001\002\000\044\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\043\uffbe\044\uffbe\047\uffbe\051\uffbe\001" +
    "\002\000\020\011\uffc7\024\uffc7\046\uffc7\054\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\001\002\000\020\011\uffc8\024\uffc8\046" +
    "\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\001\002\000\020" +
    "\011\uffc3\024\uffc3\046\uffc3\054\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\001\002\000\020\011\uffc6\024\uffc6\046\uffc6\054\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\001\002\000\020\011\uffc4\024" +
    "\uffc4\046\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\001\002" +
    "\000\020\011\107\024\105\046\117\054\023\055\026\056" +
    "\025\057\075\001\002\000\020\011\uffc5\024\uffc5\046\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\057\uffc5\001\002\000\014\023" +
    "\123\024\124\036\uffc9\037\uffc9\047\uffc9\001\002\000\020" +
    "\011\107\024\105\046\117\054\023\055\026\056\025\057" +
    "\075\001\002\000\006\037\uffca\047\uffca\001\002\000\020" +
    "\011\107\024\105\046\117\054\023\055\026\056\025\057" +
    "\075\001\002\000\004\057\147\001\002\000\060\023\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\001\002\000\010\023\123\024\124" +
    "\051\151\001\002\000\060\023\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043" +
    "\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6" +
    "\001\002\000\004\043\uffd1\001\002\000\046\023\uffba\024" +
    "\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba" +
    "\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\043\uffba\044" +
    "\uffba\047\uffba\050\154\051\uffba\001\002\000\020\011\107" +
    "\024\105\046\117\054\023\055\026\056\025\057\075\001" +
    "\002\000\010\023\123\024\124\051\156\001\002\000\044" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9" +
    "\043\uffb9\044\uffb9\047\uffb9\051\uffb9\001\002\000\020\011" +
    "\107\024\105\046\117\054\023\055\026\056\025\057\075" +
    "\001\002\000\004\047\uffcc\001\002\000\044\023\uffc1\024" +
    "\uffc1\025\131\026\130\027\127\030\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\043\uffc1\044" +
    "\uffc1\047\uffc1\051\uffc1\001\002\000\010\023\123\024\124" +
    "\043\uffd4\001\002\000\020\011\107\024\105\046\117\054" +
    "\023\055\026\056\025\057\075\001\002\000\012\023\123" +
    "\024\124\044\165\047\166\001\002\000\004\054\167\001" +
    "\002\000\004\043\uffd6\001\002\000\004\047\170\001\002" +
    "\000\004\043\uffd7\001\002\000\004\053\uffe1\001\002\000" +
    "\020\011\107\024\105\046\117\054\023\055\026\056\025" +
    "\057\075\001\002\000\004\047\174\001\002\000\024\005" +
    "\101\010\072\012\074\013\065\014\077\016\100\021\076" +
    "\052\066\057\075\001\002\000\006\007\176\043\uffd3\001" +
    "\002\000\024\005\101\010\072\012\074\013\065\014\077" +
    "\016\100\021\076\052\066\057\075\001\002\000\004\043" +
    "\uffd2\001\002\000\010\015\046\053\uffe8\057\014\001\002" +
    "\000\004\053\uffe9\001\002\000\020\011\107\024\105\046" +
    "\117\054\023\055\026\056\025\057\075\001\002\000\004" +
    "\043\uffdc\001\002\000\022\011\107\024\105\046\117\047" +
    "\uffce\054\023\055\026\056\025\057\075\001\002\000\004" +
    "\043\uffdd\001\002\000\004\047\212\001\002\000\010\023" +
    "\123\024\124\044\210\001\002\000\022\011\107\024\105" +
    "\046\117\047\uffce\054\023\055\026\056\025\057\075\001" +
    "\002\000\004\047\uffcf\001\002\000\004\043\uffdb\001\002" +
    "\000\010\023\123\024\124\043\uffde\001\002\000\034\005" +
    "\uffdf\007\uffdf\010\uffdf\012\uffdf\013\uffdf\014\uffdf\016\uffdf" +
    "\017\uffdf\021\uffdf\043\uffdf\052\uffdf\053\uffdf\057\uffdf\001" +
    "\002\000\004\053\216\001\002\000\004\043\uffd0\001\002" +
    "\000\004\057\075\001\002\000\010\045\146\047\221\050" +
    "\145\001\002\000\004\043\uffd8\001\002\000\004\053\uffeb" +
    "\001\002\000\004\052\uffef\001\002\000\004\043\230\001" +
    "\002\000\006\043\ufff3\044\226\001\002\000\004\057\055" +
    "\001\002\000\004\043\ufff4\001\002\000\014\006\ufff5\022" +
    "\ufff5\052\ufff5\053\ufff5\057\ufff5\001\002\000\010\015\046" +
    "\053\uffe8\057\014\001\002\000\004\053\233\001\002\000" +
    "\004\002\001\001\002\000\004\052\uffff\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\011\006\007\007\014\010\006" +
    "\011\010\012\012\001\001\000\002\001\001\000\016\004" +
    "\233\006\007\007\014\010\006\011\010\012\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\223\015" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\031\001\001\000\004\012\222" +
    "\001\001\000\002\001\001\000\010\010\034\012\012\017" +
    "\033\001\001\000\004\020\037\001\001\000\010\010\034" +
    "\012\012\017\035\001\001\000\002\001\001\000\010\005" +
    "\042\012\044\021\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\051\022\050\024\052\001\001\000\002\001" +
    "\001\000\004\015\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\051\024\060\001\001\000\002\001\001" +
    "\000\010\010\034\012\012\017\062\001\001\000\002\001" +
    "\001\000\012\023\072\025\066\026\067\041\070\001\001" +
    "\000\002\001\001\000\010\023\214\025\066\026\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\023\072\025\066\026\067\041" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\013\112\026\111\027\161\035\110\036" +
    "\113\001\001\000\010\023\101\025\066\026\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\013\112\026\111\027\115\031\107\032\105\033\114" +
    "\035\110\036\113\001\001\000\012\013\112\026\111\035" +
    "\160\036\113\001\001\000\002\001\001\000\004\012\152" +
    "\001\001\000\002\001\001\000\004\040\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\137\037\121\001\001\000\014\013" +
    "\112\026\111\027\117\035\110\036\113\001\001\000\004" +
    "\037\121\001\001\000\002\001\001\000\012\013\112\026" +
    "\111\035\124\036\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\125\001\001\000\010\013\112\026" +
    "\111\036\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\013\112\026\111\027\141\035\110\036" +
    "\113\001\001\000\002\001\001\000\004\037\121\001\001" +
    "\000\016\013\112\026\111\027\115\033\143\035\110\036" +
    "\113\001\001\000\002\001\001\000\014\013\112\026\111" +
    "\027\147\035\110\036\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\013\112\026" +
    "\111\027\154\035\110\036\113\001\001\000\004\037\121" +
    "\001\001\000\002\001\001\000\020\013\112\026\111\027" +
    "\115\032\157\033\114\035\110\036\113\001\001\000\002" +
    "\001\001\000\004\040\125\001\001\000\004\037\121\001" +
    "\001\000\014\013\112\026\111\027\163\035\110\036\113" +
    "\001\001\000\004\037\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\013\112\026\111\027\115\031\172\032" +
    "\105\033\114\035\110\036\113\001\001\000\002\001\001" +
    "\000\010\023\174\025\066\026\067\001\001\000\002\001" +
    "\001\000\010\023\176\025\066\026\067\001\001\000\002" +
    "\001\001\000\010\005\200\012\044\021\043\001\001\000" +
    "\002\001\001\000\014\013\112\026\111\027\212\035\110" +
    "\036\113\001\001\000\002\001\001\000\016\013\112\026" +
    "\111\027\206\030\205\035\110\036\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\121\001\001\000" +
    "\016\013\112\026\111\027\206\030\210\035\110\036\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\226\015\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\231" +
    "\012\044\021\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // mulop ::= PERCENT 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // mulop ::= SLASH 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // mulop ::= ASTERISK 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // addop ::= MINUS 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // addop ::= PLUS 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // designator ::= designator LSQUARE expr RSQUARE 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // designator ::= designator DOT IDENTIFIER 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // designator ::= IDENTIFIER 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // factor ::= NEW type LSQUARE expr RSQUARE 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // factor ::= NEW type 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= LPAREN expr RPAREN 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= constant 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= designator 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // term ::= term mulop factor 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // term ::= factor 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= expr addop term 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= MINUS term 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= term 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // relop ::= LESSEQUAL 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // relop ::= LESS 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // relop ::= GREATEREQUAL 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // relop ::= GREATER 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relop ::= NOTEQUAL 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relop ::= EQUALEQUAL 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condFact ::= expr relop expr 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*condFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condTerm ::= condFact AND condFact 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*condTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condTerm ::= condFact 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*condTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condition ::= condTerm OR condTerm 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condition ::= condTerm 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // actPars ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*actPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // actPars ::= expr COMMA actPars 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*actPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // designatorStatement ::= LBRACE statement RBRACE 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // designatorStatement ::= DO statement WHILE LPAREN condition RPAREN 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // designatorStatement ::= IF LPAREN condition RPAREN statement ELSE statement 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // designatorStatement ::= IF LPAREN condition RPAREN statement 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // designatorStatement ::= RETURN expr 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // designatorStatement ::= RETURN 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // designatorStatement ::= PRINT LPAREN expr RPAREN 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // designatorStatement ::= PRINT LPAREN expr COMMA NUMCONST RPAREN 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // designatorStatement ::= READ LPAREN designator RPAREN 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // designatorStatement ::= CONTINUE 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // designatorStatement ::= BREAK 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // designatorStatement ::= designator LPAREN actPars RPAREN 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // designatorStatement ::= designator MINUSMINUS 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // designatorStatement ::= designator PLUSPLUS 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // designatorStatement ::= designator EQUAL expr 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*designatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= designatorStatement SEMICOLON 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statementList ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*statementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statementList ::= statement statementList 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*statementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // formParsList ::= type var 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*formParsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // formParsList ::= type var COMMA formParsList 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*formParsList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // formPars ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*formPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // formPars ::= formParsList 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*formPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // returnType ::= VOID 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*returnType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // returnType ::= type 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*returnType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // methodDecl ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*methodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // methodDecl ::= returnType IDENTIFIER LPAREN formPars RPAREN localVarDecl LBRACE statementList RBRACE methodDecl 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*methodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // classMethodDecl ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*classMethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // classMethodDecl ::= LBRACE methodDecl RBRACE 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*classMethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // localVarDecl ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*localVarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // localVarDecl ::= varDecl localVarDecl 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*localVarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // classExtension ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*classExtension*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // classExtension ::= EXTENDS type 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*classExtension*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // classDecl ::= CLASS IDENTIFIER classExtension LBRACE localVarDecl classMethodDecl RBRACE SEMICOLON 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*classDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var ::= IDENTIFIER LSQUARE RSQUARE 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*var*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var ::= IDENTIFIER 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*var*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // varList ::= var 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*varList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // varList ::= var COMMA varList 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*varList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varDecl ::= type varList SEMICOLON 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*varDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constant ::= BOOLCONST 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*constant*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constant ::= CHARCONST 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*constant*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constant ::= NUMCONST 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*constant*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= IDENTIFIER 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constDecl ::= CONST type IDENTIFIER EQUAL constant SEMICOLON 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*constDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // programDecl ::= classDecl 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*programDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programDecl ::= varDecl 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*programDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programDecl ::= constDecl 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*programDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programDeclList ::= 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*programDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programDeclList ::= programDecl programDeclList 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*programDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM IDENTIFIER programDeclList LBRACE methodDecl RBRACE 
            {
              Object RESULT = null;

              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

